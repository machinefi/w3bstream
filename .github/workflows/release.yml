name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  release_job:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: pub_client-linux-amd64
            applet_mgr_name: srv-applet-mgr-linux-amd64
          - os: windows-latest
            artifact_name: pub_client-windows-amd64.exe
            applet_mgr_name: srv-applet-mgr-windows-amd64
          - os: macos-latest
            artifact_name: pub_client-darwin-amd64
            applet_mgr_name: srv-applet-mgr-darwin-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: make pub_client
        run: |
          set CGO_ENABLED=1 
          set GOARCH=amd64
          go build -o ./${{ matrix.applet_mgr_name }} -v ./cmd/srv-applet-mgr
          go build -o ./${{ matrix.artifact_name }} -v ./cmd/pub_client

      - name: Upload srv-applet-mgr binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ matrix.applet_mgr_name }}
          asset_name: ${{ matrix.applet_mgr_name }}
          tag: ${{ github.ref }}

      - name: Upload pub_client binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          tag: ${{ github.ref }}

      - name: Configure srv-applet-mgr GPG Linux/MacOS
        if: startsWith(matrix.os, 'windows-latest') != true
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          echo "$GPG_SIGNING_KEY" | gpg --batch --import
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab ./${{ matrix.applet_mgr_name }}

      - name: Configure srv-applet-mgr GPG Windows
        if: startsWith(matrix.os, 'windows-latest')
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo $env:GPG_SIGNING_KEY | gpg --batch --import
          gpg --passphrase "$env:GPG_PASSPHRASE" --batch --pinentry-mode loopback -ab ./${{ matrix.applet_mgr_name }}

      - name: Upload srv-applet-mgr signature
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: ${{ matrix.applet_mgr_name }}.asc
          file: ./${{ matrix.applet_mgr_name }}.asc
          tag: ${{ github.ref }}

      - name: Configure pub_client GPG Linux/MacOS
        if: startsWith(matrix.os, 'windows-latest') != true
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          echo "$GPG_SIGNING_KEY" | gpg --batch --import
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab ./${{ matrix.artifact_name }}

      - name: Configure pub_client GPG Windows
        if: startsWith(matrix.os, 'windows-latest')
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo $env:GPG_SIGNING_KEY | gpg --batch --import
          gpg --passphrase "$env:GPG_PASSPHRASE" --batch --pinentry-mode loopback -ab ./${{ matrix.artifact_name }}

      - name: Upload pub_client signature
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: ${{ matrix.artifact_name }}.asc
          file: ./${{ matrix.artifact_name }}.asc
          tag: ${{ github.ref }}
