// Code generated by MockGen. DO NOT EDIT.
// Source: ./mock_base_types/interfaces.go

// Package mock_base_types is a generated GoMock package.
package mock_base_types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecurityString is a mock of SecurityString interface.
type MockSecurityString struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityStringMockRecorder
}

// MockSecurityStringMockRecorder is the mock recorder for MockSecurityString.
type MockSecurityStringMockRecorder struct {
	mock *MockSecurityString
}

// NewMockSecurityString creates a new mock instance.
func NewMockSecurityString(ctrl *gomock.Controller) *MockSecurityString {
	mock := &MockSecurityString{ctrl: ctrl}
	mock.recorder = &MockSecurityStringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityString) EXPECT() *MockSecurityStringMockRecorder {
	return m.recorder
}

// SecurityString mocks base method.
func (m *MockSecurityString) SecurityString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurityString")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecurityString indicates an expected call of SecurityString.
func (mr *MockSecurityStringMockRecorder) SecurityString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurityString", reflect.TypeOf((*MockSecurityString)(nil).SecurityString))
}

// MockString is a mock of String interface.
type MockString struct {
	ctrl     *gomock.Controller
	recorder *MockStringMockRecorder
}

// MockStringMockRecorder is the mock recorder for MockString.
type MockStringMockRecorder struct {
	mock *MockString
}

// NewMockString creates a new mock instance.
func NewMockString(ctrl *gomock.Controller) *MockString {
	mock := &MockString{ctrl: ctrl}
	mock.recorder = &MockStringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockString) EXPECT() *MockStringMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockString) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockString)(nil).String))
}

// MockNamed is a mock of Named interface.
type MockNamed struct {
	ctrl     *gomock.Controller
	recorder *MockNamedMockRecorder
}

// MockNamedMockRecorder is the mock recorder for MockNamed.
type MockNamedMockRecorder struct {
	mock *MockNamed
}

// NewMockNamed creates a new mock instance.
func NewMockNamed(ctrl *gomock.Controller) *MockNamed {
	mock := &MockNamed{ctrl: ctrl}
	mock.recorder = &MockNamedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamed) EXPECT() *MockNamedMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockNamed) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockNamedMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamed)(nil).Name))
}

// MockDefaultSetter is a mock of DefaultSetter interface.
type MockDefaultSetter struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultSetterMockRecorder
}

// MockDefaultSetterMockRecorder is the mock recorder for MockDefaultSetter.
type MockDefaultSetterMockRecorder struct {
	mock *MockDefaultSetter
}

// NewMockDefaultSetter creates a new mock instance.
func NewMockDefaultSetter(ctrl *gomock.Controller) *MockDefaultSetter {
	mock := &MockDefaultSetter{ctrl: ctrl}
	mock.recorder = &MockDefaultSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultSetter) EXPECT() *MockDefaultSetterMockRecorder {
	return m.recorder
}

// SetDefault mocks base method.
func (m *MockDefaultSetter) SetDefault() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefault")
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockDefaultSetterMockRecorder) SetDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockDefaultSetter)(nil).SetDefault))
}

// MockInitializer is a mock of Initializer interface.
type MockInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerMockRecorder
}

// MockInitializerMockRecorder is the mock recorder for MockInitializer.
type MockInitializerMockRecorder struct {
	mock *MockInitializer
}

// NewMockInitializer creates a new mock instance.
func NewMockInitializer(ctrl *gomock.Controller) *MockInitializer {
	mock := &MockInitializer{ctrl: ctrl}
	mock.recorder = &MockInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitializer) EXPECT() *MockInitializerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockInitializer) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockInitializerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInitializer)(nil).Init))
}

// MockValidatedInitializer is a mock of ValidatedInitializer interface.
type MockValidatedInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockValidatedInitializerMockRecorder
}

// MockValidatedInitializerMockRecorder is the mock recorder for MockValidatedInitializer.
type MockValidatedInitializerMockRecorder struct {
	mock *MockValidatedInitializer
}

// NewMockValidatedInitializer creates a new mock instance.
func NewMockValidatedInitializer(ctrl *gomock.Controller) *MockValidatedInitializer {
	mock := &MockValidatedInitializer{ctrl: ctrl}
	mock.recorder = &MockValidatedInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatedInitializer) EXPECT() *MockValidatedInitializerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockValidatedInitializer) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockValidatedInitializerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockValidatedInitializer)(nil).Init))
}

// MockInitializerWith is a mock of InitializerWith interface.
type MockInitializerWith struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerWithMockRecorder
}

// MockInitializerWithMockRecorder is the mock recorder for MockInitializerWith.
type MockInitializerWithMockRecorder struct {
	mock *MockInitializerWith
}

// NewMockInitializerWith creates a new mock instance.
func NewMockInitializerWith(ctrl *gomock.Controller) *MockInitializerWith {
	mock := &MockInitializerWith{ctrl: ctrl}
	mock.recorder = &MockInitializerWithMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitializerWith) EXPECT() *MockInitializerWithMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockInitializerWith) Init(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *MockInitializerWithMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInitializerWith)(nil).Init), arg0)
}

// MockValidatedInitializerWith is a mock of ValidatedInitializerWith interface.
type MockValidatedInitializerWith struct {
	ctrl     *gomock.Controller
	recorder *MockValidatedInitializerWithMockRecorder
}

// MockValidatedInitializerWithMockRecorder is the mock recorder for MockValidatedInitializerWith.
type MockValidatedInitializerWithMockRecorder struct {
	mock *MockValidatedInitializerWith
}

// NewMockValidatedInitializerWith creates a new mock instance.
func NewMockValidatedInitializerWith(ctrl *gomock.Controller) *MockValidatedInitializerWith {
	mock := &MockValidatedInitializerWith{ctrl: ctrl}
	mock.recorder = &MockValidatedInitializerWithMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatedInitializerWith) EXPECT() *MockValidatedInitializerWithMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockValidatedInitializerWith) Init(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockValidatedInitializerWithMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockValidatedInitializerWith)(nil).Init), arg0)
}
