// Code generated by MockGen. DO NOT EDIT.
// Source: ../depends/conf/storage/storage.go

// Package mock_conf_storage is a generated GoMock package.
package mock_conf_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	storage "github.com/machinefi/w3bstream/pkg/depends/conf/storage"
)

// MockStorageOperations is a mock of StorageOperations interface.
type MockStorageOperations struct {
	ctrl     *gomock.Controller
	recorder *MockStorageOperationsMockRecorder
}

// MockStorageOperationsMockRecorder is the mock recorder for MockStorageOperations.
type MockStorageOperationsMockRecorder struct {
	mock *MockStorageOperations
}

// NewMockStorageOperations creates a new mock instance.
func NewMockStorageOperations(ctrl *gomock.Controller) *MockStorageOperations {
	mock := &MockStorageOperations{ctrl: ctrl}
	mock.recorder = &MockStorageOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageOperations) EXPECT() *MockStorageOperationsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageOperations) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageOperationsMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageOperations)(nil).Delete), key)
}

// Read mocks base method.
func (m *MockStorageOperations) Read(key string, chk ...storage.HmacAlgType) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range chk {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockStorageOperationsMockRecorder) Read(key interface{}, chk ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, chk...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorageOperations)(nil).Read), varargs...)
}

// Type mocks base method.
func (m *MockStorageOperations) Type() storage.StorageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(storage.StorageType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockStorageOperationsMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockStorageOperations)(nil).Type))
}

// Upload mocks base method.
func (m *MockStorageOperations) Upload(key string, file []byte, chk ...storage.HmacAlgType) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, file}
	for _, a := range chk {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockStorageOperationsMockRecorder) Upload(key, file interface{}, chk ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, file}, chk...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageOperations)(nil).Upload), varargs...)
}

// MockStorageOperationsWithValidation is a mock of StorageOperationsWithValidation interface.
type MockStorageOperationsWithValidation struct {
	ctrl     *gomock.Controller
	recorder *MockStorageOperationsWithValidationMockRecorder
}

// MockStorageOperationsWithValidationMockRecorder is the mock recorder for MockStorageOperationsWithValidation.
type MockStorageOperationsWithValidationMockRecorder struct {
	mock *MockStorageOperationsWithValidation
}

// NewMockStorageOperationsWithValidation creates a new mock instance.
func NewMockStorageOperationsWithValidation(ctrl *gomock.Controller) *MockStorageOperationsWithValidation {
	mock := &MockStorageOperationsWithValidation{ctrl: ctrl}
	mock.recorder = &MockStorageOperationsWithValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageOperationsWithValidation) EXPECT() *MockStorageOperationsWithValidationMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockStorageOperationsWithValidation) Validate(data []byte, sum string, chk ...storage.HmacAlgType) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{data, sum}
	for _, a := range chk {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockStorageOperationsWithValidationMockRecorder) Validate(data, sum interface{}, chk ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{data, sum}, chk...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockStorageOperationsWithValidation)(nil).Validate), varargs...)
}
