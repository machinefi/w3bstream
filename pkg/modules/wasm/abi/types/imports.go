package types

import (
	"context"
	"math/rand"
	"os"

	"github.com/pkg/errors"
	"golang.org/x/exp/slog"

	"github.com/machinefi/w3bstream/pkg/modules/wasm/consts"
)

type ImportsHandler interface {
	ImportsSystem
	ImportsResource
	ImportsEventType
	ImportsKVStore
	ImportsSQL
	ImportsChainOperation
	ImportsMQTT
	ImportsMetrics
	ImportsAsyncCall
}

type ImportsSystem interface {
	// Log host log
	Log(level consts.LogLevel, msg string)
	// LogInternal
	LogInternal(level consts.LogLevel, msg string, args ...any)
	// FlushLog
	FlushLog()
	// Env get env var by key
	Env(key string) (string, bool)
	// Abort
	Abort(msg, filename string, line, col int32)
	// Trace is reserved for imported func env.trace() which is auto-generated by assembly-script
	Trace(msg string, trace string)
	// Seed is reserved for imported func env.seed() which is auto-generated by assembly-script
	Seed() float64
}

type ImportsResource interface {
	// GetResourceData get resource data by resource id
	GetResourceData(rid uint32) ([]byte, bool)
	// SetResourceData set resource data by resource id
	SetResourceData(rid uint32, data []byte) error
	// RemoveResourceData remove resource data by resource id
	RemoveResourceData(rid uint32)
}

type ImportsEventType interface {
	// GetEventType get event type by resource id
	GetEventType(rid uint32) (string, bool)
	// SetEventType set event type by resource id
	SetEventType(rid uint32, typ string) error
	// RemoveEventType remove event type by resource id
	RemoveEventType(rid uint32)
}

type ImportsKVStore interface {
	// GetKVData read value by key from kv store
	GetKVData(key string) ([]byte, error)
	// SetKVData set value by key to kv store
	SetKVData(key string, data []byte) error
}

type ImportsSQL interface {
	// ExecSQL exec sql query
	ExecSQL(q string) error
	// QuerySQL query data
	QuerySQL(q string) ([]byte, error)
}

type ImportsChainOperation interface {
	// SendTX send tx by chain id and data, returns tx hash and error
	SendTX(chainID int32, data []byte) (string, error)
	// SendTXWithOperator
	SendTXWithOperator(chainID int32, data []byte) (string, error)
	// CallContract call contract by chain id and data, returns call result
	CallContract(chainID int32, data []byte) ([]byte, error)
}

type ImportsMQTT interface {
	// PubMQTT publish mqtt message
	PubMQTT(topic string, message []byte) error
}

type ImportsMetrics interface {
	// SubmitMetrics submit metrics
	SubmitMetrics(data []byte) error
}

type ImportsAsyncCall interface {
	// AsyncAPICall call async api
	AsyncAPICall(req []byte) ([]byte, error)
}

var ErrNotImplemented = errors.New("not implemented")

var (
	_ ImportsSystem         = (*DefaultImportsSystem)(nil)
	_ ImportsResource       = (*DefaultImportsResource)(nil)
	_ ImportsEventType      = (*DefaultImportsEventType)(nil)
	_ ImportsKVStore        = (*DefaultImportsKVStore)(nil)
	_ ImportsSQL            = (*DefaultImportsSQL)(nil)
	_ ImportsChainOperation = (*DefaultImportsChainOperation)(nil)
	_ ImportsMQTT           = (*DefaultImportsMQTT)(nil)
	_ ImportsMetrics        = (*DefaultImportsMetrics)(nil)
	_ ImportsAsyncCall      = (*DefaultImportsAsyncCall)(nil)
)

func NewDefaultImports() ImportsHandler {
	return struct {
		ImportsSystem
		ImportsResource
		ImportsEventType
		ImportsKVStore
		ImportsSQL
		ImportsChainOperation
		ImportsMQTT
		ImportsMetrics
		ImportsAsyncCall
	}{
		ImportsSystem:         &DefaultImportsSystem{},
		ImportsResource:       &DefaultImportsResource{},
		ImportsEventType:      &DefaultImportsEventType{},
		ImportsKVStore:        &DefaultImportsKVStore{},
		ImportsSQL:            &DefaultImportsSQL{},
		ImportsChainOperation: &DefaultImportsChainOperation{},
		ImportsMQTT:           &DefaultImportsMQTT{},
		ImportsMetrics:        &DefaultImportsMetrics{},
		ImportsAsyncCall:      &DefaultImportsAsyncCall{},
	}
}

type DefaultImportsSystem struct {
	_rand *rand.Rand
}

func (l *DefaultImportsSystem) Log(level consts.LogLevel, msg string) {
	slog.Log(context.Background(), level.Level(), msg)
}

func (l *DefaultImportsSystem) LogInternal(level consts.LogLevel, msg string, args ...any) {
	slog.Log(context.Background(), level.Level(), msg, args...)
}

func (l *DefaultImportsSystem) FlushLog() {}

func (l *DefaultImportsSystem) Env(key string) (string, bool) {
	return os.LookupEnv(key)
}

func (l *DefaultImportsSystem) Abort(msg, filename string, line, col int32) {}

func (l *DefaultImportsSystem) Trace(msg string, trace string) {}

func (l *DefaultImportsSystem) Seed() float64 { return 0 }

type DefaultImportsResource struct {
}

func (v *DefaultImportsResource) GetResourceData(uint32) ([]byte, bool) {
	return nil, false
}

func (v *DefaultImportsResource) SetResourceData(uint32, []byte) error {
	return ErrNotImplemented
}

func (v *DefaultImportsResource) RemoveResourceData(uint32) {}

type DefaultImportsEventType struct {
}

func (v *DefaultImportsEventType) GetEventType(uint32) (string, bool) {
	return "", false
}

func (v *DefaultImportsEventType) SetEventType(uint32, string) error {
	return ErrNotImplemented
}

func (v *DefaultImportsEventType) RemoveEventType(uint32) {}

type DefaultImportsKVStore struct{}

func (*DefaultImportsKVStore) GetKVData(string) ([]byte, error) {
	return nil, ErrNotImplemented
}

func (*DefaultImportsKVStore) SetKVData(string, []byte) error {
	return ErrNotImplemented
}

type DefaultImportsSQL struct{}

func (*DefaultImportsSQL) ExecSQL(string) error {
	return ErrNotImplemented
}

func (*DefaultImportsSQL) QuerySQL(string) ([]byte, error) {
	return nil, ErrNotImplemented
}

type DefaultImportsChainOperation struct{}

func (*DefaultImportsChainOperation) SendTX(chainID int32, data []byte) (string, error) {
	return "", ErrNotImplemented
}

func (*DefaultImportsChainOperation) SendTXWithOperator(chainID int32, data []byte) (string, error) {
	return "", ErrNotImplemented
}

func (*DefaultImportsChainOperation) CallContract(chainID int32, data []byte) ([]byte, error) {
	return nil, ErrNotImplemented
}

type DefaultImportsMQTT struct{}

func (*DefaultImportsMQTT) PubMQTT(topic string, message []byte) error {
	return ErrNotImplemented
}

type DefaultImportsMetrics struct{}

func (*DefaultImportsMetrics) SubmitMetrics(data []byte) error {
	return ErrNotImplemented
}

type DefaultImportsAsyncCall struct{}

func (*DefaultImportsAsyncCall) AsyncAPICall(req []byte) ([]byte, error) {
	return nil, ErrNotImplemented
}
