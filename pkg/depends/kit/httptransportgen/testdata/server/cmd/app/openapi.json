{
  "openapi": "3.0.3",
  "info": {
    "title": "",
    "version": ""
  },
  "paths": {
    "/demo": {
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "OpenAPI",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesBuffer"
                }
              }
            }
          },
          "499": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[ContextCanceled][499000000][ContextCanceled]"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[UnknownError][500000000][UnknownError]"
            ]
          }
        }
      }
    },
    "/demo/binary/files": {
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "download file",
        "operationId": "DownloadFile",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxAttachment"
                }
              }
            }
          }
        }
      }
    },
    "/demo/binary/images": {
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "show image",
        "operationId": "ShowImage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "image/png": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxImagePNG"
                }
              }
            }
          }
        }
      }
    },
    "/demo/cookie": {
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "Cookie",
        "parameters": [
          {
            "name": "token",
            "in": "cookie",
            "schema": {
              "type": "string",
              "x-go-field-name": "Token",
              "x-tag-name": "token,omitempty"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          },
          "499": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[ContextCanceled][499000000][ContextCanceled]"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[UnknownError][500000000][UnknownError]"
            ]
          }
        }
      }
    },
    "/demo/forms/multipart": {
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "Form Multipart",
        "operationId": "FormMultipartWithFile",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Data"
                      },
                      {
                        "x-go-field-name": "Data",
                        "x-tag-name": "data,omitempty"
                      }
                    ]
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "x-go-field-name": "File",
                    "x-go-star-level": 1,
                    "x-tag-name": "file"
                  },
                  "map": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "propertyNames": {
                      "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesProtocol"
                    },
                    "x-go-field-name": "Map",
                    "x-tag-name": "map,omitempty"
                  },
                  "slice": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-go-field-name": "Slice",
                    "x-tag-name": "slice,omitempty"
                  },
                  "string": {
                    "type": "string",
                    "deprecated": true,
                    "x-go-field-name": "String",
                    "x-tag-name": "string,omitempty"
                  }
                },
                "required": [
                  "file"
                ],
                "x-go-field-name": "FormData",
                "x-tag-mime": "multipart"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/demo/forms/multipart-with-files": {
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "Form Multipart With Files",
        "operationId": "FormMultipartWithFiles",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "x-go-star-level": 1
                    },
                    "x-go-field-name": "Files",
                    "x-tag-name": "files"
                  }
                },
                "required": [
                  "files"
                ],
                "x-go-field-name": "FormData",
                "x-tag-mime": "multipart"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/demo/forms/urlencoded": {
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "Form URL Encoded",
        "operationId": "FormURLEncoded",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Data"
                      },
                      {
                        "x-go-field-name": "Data",
                        "x-tag-name": "data"
                      }
                    ]
                  },
                  "slice": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "x-go-field-name": "Slice",
                    "x-tag-name": "slice"
                  },
                  "string": {
                    "type": "string",
                    "x-go-field-name": "String",
                    "x-tag-name": "string"
                  }
                },
                "required": [
                  "string",
                  "slice",
                  "data"
                ],
                "x-go-field-name": "FormData",
                "x-tag-mime": "urlencoded"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/demo/proxy": {
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "ProxyV2",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitKitResult"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[RequestTransformFailed][400000000][RequestTransformFailed]"
            ]
          },
          "499": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[ClientClosedRequest][499000000][ClientClosedRequest]",
              "@StatusErr[ContextCanceled][499000000][ContextCanceled]"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[RequestFailed][500000000][RequestFailed]",
              "@StatusErr[UnknownError][500000000][UnknownError]"
            ]
          }
        }
      }
    },
    "/demo/redirect": {
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "Redirect",
        "responses": {
          "302": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "RedirectWhenError",
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    },
    "/demo/restful": {
      "head": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "operationId": "HealthCheck",
        "parameters": [
          {
            "name": "pullPolicy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesPullPolicy"
                },
                {
                  "x-go-field-name": "PullPolicy",
                  "x-tag-name": "pullPolicy,omitempty"
                }
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "Create",
        "operationId": "Create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Data"
                  },
                  {
                    "x-go-field-name": "Data"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data"
                }
              }
            }
          }
        }
      }
    },
    "/demo/restful/{id}": {
      "delete": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "remove by id",
        "operationId": "RemoveByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 6,
              "x-go-field-name": "ID",
              "x-tag-name": "id",
              "x-tag-validate": "@string[6,]"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[Unauthorized][401999001][Unauthorized]!"
            ]
          },
          "499": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[ContextCanceled][499000000][ContextCanceled]"
            ]
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
                }
              }
            },
            "x-status-errors": [
              "@StatusErr[InternalServerError][500100001][InternalServerError]",
              "@StatusErr[InternalServerError][500999001][InternalServerError]",
              "@StatusErr[UnknownError][500000000][UnknownError]"
            ]
          }
        }
      },
      "get": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "get by id",
        "operationId": "GetByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 6,
              "x-go-field-name": "ID",
              "x-tag-name": "id",
              "x-tag-validate": "@string[6,]"
            }
          },
          {
            "name": "label",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-field-name": "Label",
              "x-tag-name": "label,omitempty"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "x-go-field-name": "Name",
              "x-tag-name": "name,omitempty"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesProtocol"
                },
                {
                  "x-go-field-name": "Protocol",
                  "x-tag-name": "protocol,omitempty"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Data"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/cmd/app"
        ],
        "summary": "update by id",
        "operationId": "UpdateByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 6,
              "x-go-field-name": "ID",
              "x-tag-name": "id",
              "x-tag-validate": "@string[6,]"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Data"
                  },
                  {
                    "x-go-field-name": "Data"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BytesBuffer": {
        "type": "string",
        "format": "binary",
        "x-go-vendor-type": "bytes.Buffer",
        "x-id": "BytesBuffer"
      },
      "Data": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-field-name": "ID",
            "x-tag-json": "id"
          },
          "label": {
            "type": "string",
            "x-go-field-name": "Label",
            "x-tag-json": "label"
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesProtocol"
              },
              {
                "x-go-field-name": "Protocol",
                "x-tag-json": "protocol,omitempty"
              }
            ]
          },
          "ptrString": {
            "type": "string",
            "x-go-field-name": "PtrString",
            "x-go-star-level": 1,
            "x-tag-json": "ptrString,omitempty"
          },
          "subData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubData"
              },
              {
                "x-go-field-name": "SubData",
                "x-go-star-level": 1,
                "x-tag-json": "subData,omitempty"
              }
            ]
          }
        },
        "required": [
          "id",
          "label"
        ],
        "x-id": "Data"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxAttachment": {
        "type": "string",
        "format": "binary",
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransport/httpx.Attachment",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxAttachment"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxImagePNG": {
        "type": "string",
        "format": "binary",
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransport/httpx.ImagePNG",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxImagePNG"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxResponse": {
        "type": "object",
        "properties": {
          "ContentType": {
            "type": "string",
            "x-go-field-name": "ContentType"
          },
          "Cookies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetHTTPCookie"
            },
            "x-go-field-name": "Cookies"
          },
          "Location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetURLURL"
              },
              {
                "x-go-field-name": "Location",
                "x-go-star-level": 1
              }
            ]
          },
          "Meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitKitMetadata"
              },
              {
                "x-go-field-name": "Meta"
              }
            ]
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32",
            "x-go-field-name": "StatusCode"
          },
          "Value": {
            "description": "Value of body",
            "x-go-field-name": "Value"
          }
        },
        "required": [
          "Value",
          "Meta",
          "Cookies",
          "Location",
          "ContentType",
          "StatusCode"
        ],
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransport/httpx.Response",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxResponse"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxStatusFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxResponse"
          },
          {
            "type": "object",
            "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransport/httpx.StatusFound",
            "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportHttpxStatusFound"
          }
        ]
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesProtocol": {
        "type": "string",
        "enum": [
          "HTTP",
          "HTTPS",
          "TCP"
        ],
        "x-enum-labels": [
          "http",
          "https",
          "TCP"
        ],
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/pkg/types.Protocol",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesProtocol"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesPullPolicy": {
        "type": "string",
        "enum": [
          "Always",
          "IfNotPresent",
          "Never"
        ],
        "x-enum-labels": [
          "Always",
          "IfNotPresent",
          "Never"
        ],
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/httptransportgen/testdata/server/pkg/types.PullPolicy",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitHttptransportgenTestdataServerPkgTypesPullPolicy"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitKitMetadata": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "propertyNames": {
          "type": "string"
        },
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/kit.Metadata",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitKitMetadata"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitKitResult": {
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/kit.Result",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitKitResult"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorField": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field path: prop.slice[2].a",
            "x-go-field-name": "Field",
            "x-tag-json": "field",
            "x-tag-xml": "field"
          },
          "in": {
            "type": "string",
            "description": "In location eq. body, query, header, path, formData",
            "x-go-field-name": "In",
            "x-tag-json": "in",
            "x-tag-xml": "in"
          },
          "msg": {
            "type": "string",
            "description": "Msg message",
            "x-go-field-name": "Msg",
            "x-tag-json": "msg",
            "x-tag-xml": "msg"
          }
        },
        "required": [
          "field",
          "msg",
          "in"
        ],
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/statusx.ErrorField",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorField"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorFields": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorField"
        },
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/statusx.ErrorFields",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorFields"
      },
      "GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr": {
        "type": "object",
        "properties": {
          "canBeTalk": {
            "type": "boolean",
            "description": "can be task error; for client to should error msg to end user",
            "x-go-field-name": "CanBeTalk",
            "x-tag-json": "canBeTalk",
            "x-tag-xml": "canBeTalk"
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "unique err code",
            "x-go-field-name": "Code",
            "x-tag-json": "code",
            "x-tag-xml": "code"
          },
          "desc": {
            "type": "string",
            "description": "desc of err",
            "x-go-field-name": "Desc",
            "x-tag-json": "desc",
            "x-tag-xml": "desc"
          },
          "fields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GithubComMachinefiW3BstreamPkgDependsKitStatusxErrorFields"
              },
              {
                "description": "error in where fields",
                "x-go-field-name": "Fields",
                "x-tag-json": "fields",
                "x-tag-xml": "fields"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "request ID or other request context",
            "x-go-field-name": "ID",
            "x-tag-json": "id",
            "x-tag-xml": "id"
          },
          "key": {
            "type": "string",
            "description": "key of err",
            "x-go-field-name": "Key",
            "x-tag-json": "key",
            "x-tag-xml": "key"
          },
          "msg": {
            "type": "string",
            "description": "msg of err",
            "x-go-field-name": "Msg",
            "x-tag-json": "msg",
            "x-tag-xml": "msg"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "error tracing",
            "x-go-field-name": "Sources",
            "x-tag-json": "sources",
            "x-tag-xml": "sources"
          }
        },
        "required": [
          "key",
          "code",
          "msg",
          "desc",
          "canBeTalk",
          "id",
          "sources",
          "fields"
        ],
        "x-go-vendor-type": "github.com/machinefi/w3bstream/pkg/depends/kit/statusx.StatusErr",
        "x-id": "GithubComMachinefiW3BstreamPkgDependsKitStatusxStatusErr"
      },
      "IpInfo": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "x-go-field-name": "Country",
            "x-tag-json": "country",
            "x-tag-xml": "country"
          },
          "countryCode": {
            "type": "string",
            "x-go-field-name": "CountryCode",
            "x-tag-json": "countryCode",
            "x-tag-xml": "countryCode"
          }
        },
        "required": [
          "country",
          "countryCode"
        ],
        "x-id": "IpInfo"
      },
      "NetHTTPCookie": {
        "type": "object",
        "properties": {
          "Domain": {
            "type": "string",
            "description": "optional",
            "x-go-field-name": "Domain"
          },
          "Expires": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeTime"
              },
              {
                "description": "optional",
                "x-go-field-name": "Expires"
              }
            ]
          },
          "HttpOnly": {
            "type": "boolean",
            "x-go-field-name": "HttpOnly"
          },
          "MaxAge": {
            "type": "integer",
            "format": "int32",
            "description": "MaxAge=0 means no 'Max-Age' attribute specified.\nMaxAge\u003c0 means delete cookie now, equivalently 'Max-Age: 0'\nMaxAge\u003e0 means Max-Age attribute present and given in seconds",
            "x-go-field-name": "MaxAge"
          },
          "Name": {
            "type": "string",
            "x-go-field-name": "Name"
          },
          "Path": {
            "type": "string",
            "description": "optional",
            "x-go-field-name": "Path"
          },
          "Raw": {
            "type": "string",
            "x-go-field-name": "Raw"
          },
          "RawExpires": {
            "type": "string",
            "description": "for reading cookies only",
            "x-go-field-name": "RawExpires"
          },
          "SameSite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetHTTPSameSite"
              },
              {
                "x-go-field-name": "SameSite"
              }
            ]
          },
          "Secure": {
            "type": "boolean",
            "x-go-field-name": "Secure"
          },
          "Unparsed": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Raw text of unparsed attribute-value pairs",
            "x-go-field-name": "Unparsed"
          },
          "Value": {
            "type": "string",
            "x-go-field-name": "Value"
          }
        },
        "required": [
          "Name",
          "Value",
          "Path",
          "Domain",
          "Expires",
          "RawExpires",
          "MaxAge",
          "Secure",
          "HttpOnly",
          "SameSite",
          "Raw",
          "Unparsed"
        ],
        "description": "A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an\nHTTP response or the Cookie header of an HTTP request.\n\nSee https://tools.ietf.org/html/rfc6265 for details.",
        "x-go-vendor-type": "net/http.Cookie",
        "x-id": "NetHTTPCookie"
      },
      "NetHTTPSameSite": {
        "type": "integer",
        "format": "int32",
        "enum": [
          1,
          2,
          3,
          4
        ],
        "x-enum-labels": [
          "1",
          "2",
          "3",
          "4"
        ],
        "x-go-vendor-type": "net/http.SameSite",
        "x-id": "NetHTTPSameSite"
      },
      "NetURLURL": {
        "type": "object",
        "properties": {
          "ForceQuery": {
            "type": "boolean",
            "description": "append a query ('?') even if RawQuery is empty",
            "x-go-field-name": "ForceQuery"
          },
          "Fragment": {
            "type": "string",
            "description": "fragment for references, without '#'",
            "x-go-field-name": "Fragment"
          },
          "Host": {
            "type": "string",
            "description": "host or host:port",
            "x-go-field-name": "Host"
          },
          "OmitHost": {
            "type": "boolean",
            "description": "do not emit empty host (authority)",
            "x-go-field-name": "OmitHost"
          },
          "Opaque": {
            "type": "string",
            "description": "encoded opaque data",
            "x-go-field-name": "Opaque"
          },
          "Path": {
            "type": "string",
            "description": "path (relative paths may omit leading slash)",
            "x-go-field-name": "Path"
          },
          "RawFragment": {
            "type": "string",
            "description": "encoded fragment hint (see EscapedFragment method)",
            "x-go-field-name": "RawFragment"
          },
          "RawPath": {
            "type": "string",
            "description": "encoded path hint (see EscapedPath method)",
            "x-go-field-name": "RawPath"
          },
          "RawQuery": {
            "type": "string",
            "description": "encoded query values, without '?'",
            "x-go-field-name": "RawQuery"
          },
          "Scheme": {
            "type": "string",
            "x-go-field-name": "Scheme"
          },
          "User": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetURLUserinfo"
              },
              {
                "description": "username and password information",
                "x-go-field-name": "User",
                "x-go-star-level": 1
              }
            ]
          }
        },
        "required": [
          "Scheme",
          "Opaque",
          "User",
          "Host",
          "Path",
          "RawPath",
          "OmitHost",
          "ForceQuery",
          "RawQuery",
          "Fragment",
          "RawFragment"
        ],
        "description": "A URL represents a parsed URL (technically, a URI reference).\n\nThe general form represented is:\n\n\t[scheme:][//[userinfo@]host][/]path[?query][#fragment]\n\nURLs that do not start with a slash after the scheme are interpreted as:\n\n\tscheme:opaque[?query][#fragment]\n\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.\nA consequence is that it is impossible to tell which slashes in the Path were\nslashes in the raw URL and which were %2f. This distinction is rarely important,\nbut when it is, the code should use RawPath, an optional field which only gets\nset if the default encoding is different from Path.\n\nURL's String method uses the EscapedPath method to obtain the path. See the\nEscapedPath method for more details.",
        "x-go-vendor-type": "net/url.URL",
        "x-id": "NetURLURL"
      },
      "NetURLUserinfo": {
        "type": "object",
        "description": "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.",
        "x-go-vendor-type": "net/url.Userinfo",
        "x-id": "NetURLUserinfo"
      },
      "SubData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-field-name": "Name",
            "x-tag-json": "name"
          }
        },
        "required": [
          "name"
        ],
        "x-id": "SubData"
      },
      "TimeTime": {
        "type": "string",
        "format": "date-time",
        "x-go-vendor-type": "time.Time",
        "x-id": "TimeTime"
      }
    }
  }
}